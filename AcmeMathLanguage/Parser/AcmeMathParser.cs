//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\repos\AcmeMath\AcmeMathLanguage\AcmeMath.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class AcmeMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, NEWLINE=35, IDENTIFIER=36, CONSTANT=37, 
		STRING=38, INTEGER=39, FLOAT=40, SKIP_=41;
	public const int
		RULE_expression = 0, RULE_obj = 1, RULE_pair = 2, RULE_arr = 3, RULE_argList = 4, 
		RULE_functionCall = 5, RULE_literal = 6;
	public static readonly string[] ruleNames = {
		"expression", "obj", "pair", "arr", "argList", "functionCall", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'?'", "'['", "']'", "'('", "')'", "'.'", "'$'", 
		"'/'", "'-'", "'+'", "'*'", "'%'", "'^'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'!'", "'not'", "'and'", "'&&'", "'or'", "'||'", "'{'", 
		"','", "'}'", "':'", "'alpha'", "'beta'", "'gamma'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "NEWLINE", 
		"IDENTIFIER", "CONSTANT", "STRING", "INTEGER", "FLOAT", "SKIP_"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AcmeMath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AcmeMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AcmeMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AcmeMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MinusContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JumpLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public JumpLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UmLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AcmeMathParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public UmLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUmLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubscriptionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscription(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlusContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JmespathContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AcmeMathParser.STRING, 0); }
		public JmespathContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJmespath(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExpressionContext {
		public BooleanContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParentesesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenteses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrContext arr() {
			return GetRuleContext<ArrContext>(0);
		}
		public JsonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetNodeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AcmeMathParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AcmeMathParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AcmeMathParser.IDENTIFIER, i);
		}
		public GetNodeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetNode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AttributeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AcmeMathParser.IDENTIFIER, 0); }
		public AttributeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FactorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 15;
				Match(T__0);
				}
				break;
			case 2:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16;
				Match(T__1);
				}
				break;
			case 3:
				{
				_localctx = new JsonContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 17;
				obj();
				}
				break;
			case 4:
				{
				_localctx = new JsonContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 18;
				arr();
				}
				break;
			case 5:
				{
				_localctx = new JmespathContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19;
				Match(T__2);
				State = 20;
				Match(STRING);
				}
				break;
			case 6:
				{
				_localctx = new JumpLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 21;
				literal();
				}
				break;
			case 7:
				{
				_localctx = new UmLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22;
				Match(T__3);
				State = 23;
				Match(IDENTIFIER);
				State = 24;
				Match(T__4);
				State = 25;
				literal();
				}
				break;
			case 8:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				functionCall();
				}
				break;
			case 9:
				{
				_localctx = new ParentesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27;
				Match(T__5);
				State = 28;
				expression(0);
				State = 29;
				Match(T__6);
				}
				break;
			case 10:
				{
				_localctx = new GetNodeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31;
				Match(T__8);
				State = 41;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
					{
					State = 32;
					Match(STRING);
					}
					break;
				case IDENTIFIER:
					{
					State = 33;
					Match(IDENTIFIER);
					State = 38;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 34;
							Match(T__9);
							State = 35;
							Match(IDENTIFIER);
							}
							} 
						}
						State = 40;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				_localctx = new SignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__11) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 44;
				expression(9);
				}
				break;
			case 12:
				{
				_localctx = new LogicNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 45;
				_la = TokenStream.LA(1);
				if ( !(_la==T__21 || _la==T__22) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 46;
				expression(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new FactorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 49;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 50;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__12) | (1L << T__13))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 51;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new PlusContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 52;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 53;
						Match(T__11);
						State = 54;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new MinusContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 55;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 56;
						Match(T__10);
						State = 57;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new BitXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 58;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 59;
						Match(T__14);
						State = 60;
						expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 61;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 62;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 63;
						expression(5);
						}
						break;
					case 6:
						{
						_localctx = new LogicAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 64;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 65;
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__24) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 66;
						expression(3);
						}
						break;
					case 7:
						{
						_localctx = new LogicOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 67;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 68;
						_la = TokenStream.LA(1);
						if ( !(_la==T__25 || _la==T__26) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 69;
						expression(2);
						}
						break;
					case 8:
						{
						_localctx = new SubscriptionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 70;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 71;
						Match(T__3);
						State = 72;
						expression(0);
						State = 73;
						Match(T__4);
						}
						break;
					case 9:
						{
						_localctx = new AttributeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 75;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 76;
						Match(T__7);
						State = 77;
						Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(T__27);
				State = 84;
				pair();
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__28) {
					{
					{
					State = 85;
					Match(T__28);
					State = 86;
					pair();
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92;
				Match(T__29);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				Match(T__27);
				State = 95;
				Match(T__29);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AcmeMathParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(STRING);
			State = 99;
			Match(T__30);
			State = 100;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrContext arr() {
		ArrContext _localctx = new ArrContext(Context, State);
		EnterRule(_localctx, 6, RULE_arr);
		int _la;
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				Match(T__3);
				State = 103;
				expression(0);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__28) {
					{
					{
					State = 104;
					Match(T__28);
					State = 105;
					expression(0);
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 111;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				Match(T__3);
				State = 114;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 8, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			expression(0);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__28) {
				{
				{
				State = 118;
				Match(T__28);
				State = 119;
				expression(0);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlphaContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AlphaContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlpha(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetaContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BetaContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GammaContext : FunctionCallContext {
		public GammaContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGamma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionCall);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				_localctx = new AlphaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				Match(T__31);
				State = 126;
				Match(T__5);
				State = 127;
				expression(0);
				State = 128;
				Match(T__28);
				State = 129;
				expression(0);
				State = 130;
				Match(T__6);
				}
				break;
			case T__32:
				_localctx = new BetaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(T__32);
				State = 133;
				Match(T__5);
				State = 134;
				expression(0);
				State = 135;
				Match(T__6);
				}
				break;
			case T__33:
				_localctx = new GammaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 137;
				Match(T__33);
				State = 138;
				Match(T__5);
				State = 139;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AcmeMathParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AcmeMathParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AcmeMathParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AcmeMathParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(AcmeMathParser.CONSTANT, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAcmeMathVisitor<TResult> typedVisitor = visitor as IAcmeMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 12, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << CONSTANT) | (1L << STRING) | (1L << INTEGER) | (1L << FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x93', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\'', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '*', '\v', '\x2', '\x5', '\x2', ',', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x32', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'Q', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'T', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'Z', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', ']', '\v', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x63', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'm', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', 'p', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'v', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '{', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '~', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x8F', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x2', '\x3', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x2', '\t', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\x18', 
		'\x19', '\x4', '\x2', '\f', '\f', '\xF', '\x10', '\x3', '\x2', '\x12', 
		'\x17', '\x3', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '&', '*', '\x2', '\xA8', '\x2', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x62', '\x3', '\x2', '\x2', '\x2', '\x6', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'u', '\x3', '\x2', '\x2', '\x2', '\n', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x8E', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\b', '\x2', '\x1', 
		'\x2', '\x11', '\x32', '\a', '\x3', '\x2', '\x2', '\x12', '\x32', '\a', 
		'\x4', '\x2', '\x2', '\x13', '\x32', '\x5', '\x4', '\x3', '\x2', '\x14', 
		'\x32', '\x5', '\b', '\x5', '\x2', '\x15', '\x16', '\a', '\x5', '\x2', 
		'\x2', '\x16', '\x32', '\a', '(', '\x2', '\x2', '\x17', '\x32', '\x5', 
		'\xE', '\b', '\x2', '\x18', '\x19', '\a', '\x6', '\x2', '\x2', '\x19', 
		'\x1A', '\a', '&', '\x2', '\x2', '\x1A', '\x1B', '\a', '\a', '\x2', '\x2', 
		'\x1B', '\x32', '\x5', '\xE', '\b', '\x2', '\x1C', '\x32', '\x5', '\f', 
		'\a', '\x2', '\x1D', '\x1E', '\a', '\b', '\x2', '\x2', '\x1E', '\x1F', 
		'\x5', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\t', '\x2', '\x2', ' ', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '!', '+', '\a', '\v', '\x2', '\x2', 
		'\"', ',', '\a', '(', '\x2', '\x2', '#', '(', '\a', '&', '\x2', '\x2', 
		'$', '%', '\a', '\f', '\x2', '\x2', '%', '\'', '\a', '&', '\x2', '\x2', 
		'&', '$', '\x3', '\x2', '\x2', '\x2', '\'', '*', '\x3', '\x2', '\x2', 
		'\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', 
		'\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', 
		'\x2', '+', '\"', '\x3', '\x2', '\x2', '\x2', '+', '#', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x32', '\x3', '\x2', '\x2', '\x2', '-', '.', '\t', 
		'\x2', '\x2', '\x2', '.', '\x32', '\x5', '\x2', '\x2', '\v', '/', '\x30', 
		'\t', '\x3', '\x2', '\x2', '\x30', '\x32', '\x5', '\x2', '\x2', '\x5', 
		'\x31', '\x10', '\x3', '\x2', '\x2', '\x2', '\x31', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x13', '\x3', '\x2', '\x2', '\x2', '\x31', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x17', '\x3', '\x2', '\x2', '\x2', '\x31', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x31', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '!', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x32', 'R', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\f', '\n', '\x2', 
		'\x2', '\x34', '\x35', '\t', '\x4', '\x2', '\x2', '\x35', 'Q', '\x5', 
		'\x2', '\x2', '\v', '\x36', '\x37', '\f', '\t', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\xE', '\x2', '\x2', '\x38', 'Q', '\x5', '\x2', '\x2', '\n', 
		'\x39', ':', '\f', '\b', '\x2', '\x2', ':', ';', '\a', '\r', '\x2', '\x2', 
		';', 'Q', '\x5', '\x2', '\x2', '\t', '<', '=', '\f', '\a', '\x2', '\x2', 
		'=', '>', '\a', '\x11', '\x2', '\x2', '>', 'Q', '\x5', '\x2', '\x2', '\b', 
		'?', '@', '\f', '\x6', '\x2', '\x2', '@', '\x41', '\t', '\x5', '\x2', 
		'\x2', '\x41', 'Q', '\x5', '\x2', '\x2', '\a', '\x42', '\x43', '\f', '\x4', 
		'\x2', '\x2', '\x43', '\x44', '\t', '\x6', '\x2', '\x2', '\x44', 'Q', 
		'\x5', '\x2', '\x2', '\x5', '\x45', '\x46', '\f', '\x3', '\x2', '\x2', 
		'\x46', 'G', '\t', '\a', '\x2', '\x2', 'G', 'Q', '\x5', '\x2', '\x2', 
		'\x4', 'H', 'I', '\f', '\xE', '\x2', '\x2', 'I', 'J', '\a', '\x6', '\x2', 
		'\x2', 'J', 'K', '\x5', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\a', '\x2', 
		'\x2', 'L', 'Q', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\f', '\r', '\x2', 
		'\x2', 'N', 'O', '\a', '\n', '\x2', '\x2', 'O', 'Q', '\a', '&', '\x2', 
		'\x2', 'P', '\x33', '\x3', '\x2', '\x2', '\x2', 'P', '\x36', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x39', '\x3', '\x2', '\x2', '\x2', 'P', '<', '\x3', 
		'\x2', '\x2', '\x2', 'P', '?', '\x3', '\x2', '\x2', '\x2', 'P', '\x42', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x45', '\x3', '\x2', '\x2', '\x2', 'P', 
		'H', '\x3', '\x2', '\x2', '\x2', 'P', 'M', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x1E', '\x2', 
		'\x2', 'V', '[', '\x5', '\x6', '\x4', '\x2', 'W', 'X', '\a', '\x1F', '\x2', 
		'\x2', 'X', 'Z', '\x5', '\x6', '\x4', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', '\x2', 
		'\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', ' ', 
		'\x2', '\x2', '_', '\x63', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		'\x1E', '\x2', '\x2', '\x61', '\x63', '\a', ' ', '\x2', '\x2', '\x62', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x5', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '(', 
		'\x2', '\x2', '\x65', '\x66', '\a', '!', '\x2', '\x2', '\x66', 'g', '\x5', 
		'\x2', '\x2', '\x2', 'g', '\a', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\a', '\x6', '\x2', '\x2', 'i', 'n', '\x5', '\x2', '\x2', '\x2', 'j', 
		'k', '\a', '\x1F', '\x2', '\x2', 'k', 'm', '\x5', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 
		'n', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\a', '\a', '\x2', '\x2', 'r', 'v', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\a', '\x6', '\x2', '\x2', 't', 'v', '\a', '\a', '\x2', '\x2', 
		'u', 'h', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'v', '\t', '\x3', '\x2', '\x2', '\x2', 'w', '|', '\x5', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\x1F', '\x2', '\x2', 'y', '{', '\x5', '\x2', '\x2', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\v', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\"', '\x2', '\x2', '\x80', '\x81', 
		'\a', '\b', '\x2', '\x2', '\x81', '\x82', '\x5', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x1F', '\x2', '\x2', '\x83', '\x84', '\x5', '\x2', 
		'\x2', '\x2', '\x84', '\x85', '\a', '\t', '\x2', '\x2', '\x85', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '#', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\b', '\x2', '\x2', '\x88', '\x89', '\x5', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\a', '\t', '\x2', '\x2', '\x8A', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '$', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', '\b', '\x2', '\x2', '\x8D', '\x8F', '\a', '\t', '\x2', '\x2', 
		'\x8E', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8F', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\t', '\b', '\x2', '\x2', 
		'\x91', '\xF', '\x3', '\x2', '\x2', '\x2', '\r', '(', '+', '\x31', 'P', 
		'R', '[', '\x62', 'n', 'u', '|', '\x8E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
